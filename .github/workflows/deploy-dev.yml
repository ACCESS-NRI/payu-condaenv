name: Deploy Dev Enviroment
on:
#  schedule:
#    - cron: '0 * * * *' # Runs every hour
  push:
    branches:
      - main
    paths:
      - 'env-dev.yml'
  workflow_dispatch: # Allows manual triggering
jobs:
  check-for-payu-updates:
    runs-on: ubuntu-latest
    outputs:
      commits-count: ${{ steps.check-payu-commits.outputs.commits-count }}
      last-commit-hash: ${{ steps.check-payu-commits.outputs.latest-commit-hash }}
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Get last workflow run time
        id: last-run-time
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Fetch the last successful workflow run time
          response=$(gh api \
            -H "Accept: application/vnd.github+json"   \
            -H "X-GitHub-Api-Version: 2022-11-28"   \
            /repos/access-nri/payu-condaenv/actions/workflows/deploy-dev.yml/runs?status=success&per_page=1)
          last_run_time=$(echo $response | jq -r '.workflow_runs[0].updated_at')

          echo "Last successful workflow run time: $last_run_time"
          echo "last-run-time=$last_run_time" >> $GITHUB_OUTPUT

      - name: Checkout payu repository
        uses: actions/checkout@v4
        with:
          repository: payu-org/payu
          path: payu
          ref: master

      - name: Check commits in payu repository
        id: check-payu-commits
        run: |
          # Check for any commits since last successful runtime
          last_run_time="${{ steps.last-run-time.outputs.last-run-time }}"
          commits_count=$(git -C ./payu rev-list --count --since="$last_run_time" master)

          # Get latest commit hash
          latest_commit_hash=$(git -C ./payu rev-parse --short HEAD)

          echo "Number of new commits since last run: $commits_count, latest commit hash: $latest_commit_hash"

          echo "commits-count=$commits_count" >> $GITHUB_OUTPUT
          echo "latest-commit-hash=$latest_commit_hash" >> $GITHUB_OUTPUT

  pack:
    name: Pack Payu
    runs-on: ubuntu-latest
    needs:
      - check-for-payu-updates
    # Deploy payu if manually triggered, env-dev.yml has been updated, or if there's new commits to payu repository
    if: >
      needs.check-for-payu-updates.outputs.commits-count > 0 ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch'
    outputs:
      name: ${{ steps.payu.outputs.name }}
      version: ${{ steps.payu.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Payu Version
        id: payu
        run: |
          # Set version to datetime and last short commit hash of payu
          NOW=$(date -u +"%Y%m%dT%H%M%SZ")
          COMMIT_HASH=${{ needs.check-for-payu-updates.outputs.last-commit-hash }}
          VERSION="$NOW-$COMMIT_HASH"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=payu-dev-$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@422500192359a097648154e8db4e39bdb6c6eed7 #v1.8.1
        with:
          micromamba-version: '1.5.3-0'
          environment-file: env-dev.yml
          environment-name: ${{ steps.payu.outputs.name }}
          generate-run-shell: true
      
      - name: Create Pack
        shell: micromamba-shell {0}
        run: conda pack

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: payu-dev
          if-no-files-found: error
          path: |
            ${{ steps.payu.outputs.name }}.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs:
      - pack
    environment: Gadi
    env:
      NAME: ${{ needs.pack.outputs.name }}
      VERSION: ${{ needs.pack.outputs.version }}
    steps:
      - uses: actions/download-artifact@v3.0.2
        with:
          name: payu-dev

      - uses: access-nri/actions/.github/actions/setup-ssh@main
        id: ssh
        with:
          hosts: |
            ${{ secrets.HOST_DATA }}
            ${{ secrets.HOST }}
          private-key: ${{ secrets.SSH_KEY }}

      - name: Copy to Gadi 
        run: |
          rsync -e 'ssh -i ${{ steps.ssh.outputs.private-key-path }}' \
            ${{ env.NAME }}.tar.gz \
            ${{ secrets.USER }}@${{ secrets.HOST_DATA }}:${{ vars.PRERELEASE_PACK_LOCATION }}

      - name: Deploy to Gadi
        env:
          PAYU_ENVIRONMENT_LOCATION: ${{ vars.PRERELEASE_DEPLOYMENT_LOCATION }}/${{ env.VERSION }}
        run: |
          ssh ${{ secrets.USER }}@${{ secrets.HOST }} -i ${{ steps.ssh.outputs.private-key-path }} /bin/bash <<'EOT'
          
          # Remove previous enviroment if it exists
          if [ -d ${{ env.PAYU_ENVIRONMENT_LOCATION }} ]; then
            rm -rf ${{ env.PAYU_ENVIRONMENT_LOCATION }}
          fi
        
          # Unpack conda enviroment
          mkdir ${{ env.PAYU_ENVIRONMENT_LOCATION }}
          tar -xzf ${{ vars.PACK_LOCATION  }}/${{ env.NAME }}.tar.gz -C ${{ env.PAYU_ENVIRONMENT_LOCATION }}
          source ${{ env.PAYU_ENVIRONMENT_LOCATION }}/bin/activate
          conda-unpack
          payu --version
          source ${{ env.PAYU_ENVIRONMENT_LOCATION }}/bin/deactivate

          # Setup modulefile symlink
          ln -s ${{ vars.MODULE_LOCATION }}/.common ${{ vars.PRERELEASE_MODULE_LOCATION }}/${{ env.VERSION }}
          EOT
